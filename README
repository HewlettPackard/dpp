Device Provisioning Protocol
-----------------------------

  DPP provides a way to authenticate and provision a device taking
part in the "enrollee" role by a device taking part in the "configurator"
role.

  Trust in the authentication is bootstrapped using either scanned QR
codes or PKEX. Regardless of bootstrapping method, a flat file contains
the regulatory information, in the form of operating class and channel,
the MAC address of the device, and the device's public key is saved in
a flat file for use by DPP Authentication. 

  The OS-specific components reside in directories named for their
respective OS, for example the freebsd OS-specific component is 
in freebsd/sss.c. The OS-independent component is dpp.c and pkex.c. The 
other .c files are helper modules. See PORTING for a description
of the interfaces the modules have to each other.

  Multiple DPP applications can communicate over a loopback interface to
simulate a network. Each OS-specific component supports communication
over the loopback interface.

RESTRICTIONS

  macos only supports DPP over wired (controller.c and device.c).

  Freebsd currently only supports Atheros radios.

  the libnl code under linux doesn't seem to work with some radios (like
  broadcom) who block userspace apps (like dpp) from sending 802.11 action
  frames that it doesn't already know about (like dpp).

  <rant>
  I wish chipset vendors were not such fascists who operate under the
  idea of "that which is not required is forbidden". Just because it's
  not _YET_ in the 802.11 standard does not mean I should be prevented
  from issueing such a frame!

  That goes for OS vendors as well! Stop telling me what I'm allowed to do!
  </rant>

REQUIREMENTS

  libcrypto from OpenSSL, version 0.9.8 or later. Basically, all
you need is EC support that has the pre-defined groups.

BUILDING

  The file freebsd_6.4_RC1_diffs contains patches for a few
kernel files in freebsd 6.4_RC1 (other versions should be
straightforward to patch as the diffs are minor) to allow for the
sending of 802.11 authentication frames via a BPF. Rebuild the
OS with these patchs.

  Change directories to the top level and run the autotools commands:

% aclocal
% autoconf
% automake

   Then configure the package like this:

% ./configure --with-ssl=<directory> [--enable-brainpool] 

where <directory> is the top level directory of openssl. Enable
Brainpool if you have support for those curves. Then change
directories into the one that matches your OS-- macos, linux,
or freebsd-- and make.

HOW TO USE

  sss can be run to do PKEX only, DPP only, or PKEX followed by DPP.
If a scanning Configurator is hooked up it must export the scanned
public key in the form required by the bootstrapping keys flat file:

  <index> <operating class> <channel> <macaddress> <b64 encoded key>

  sss uses command line options to pick the interface, the role, the
keys to use, the files in which to place trusted keys, and the various
parameters to set when running PKEX and/or DPP:

USAGE: ./sss [-hCIBapkceirdfgs]
        -h  show usage, and exit
        -c <signkey> run DPP as the configurator, sign connectors with <signkey>
        -e <role> run DPP as the enrollee in the role of <role> (sta or ap)
        -i  run DPP as the initiator
        -r  run DPP as the responder
        -a  do not perform mutual authentication in DPP
        -C <filename> of radio configuration file
        -I <interface> to add to DPP
        -B <filename> of peer bootstrappign keys
        -p <password> to use for PKEX
        -n <identifier> for the code used in PKEX
        -f <channel> to use with DPP
        -g <opclass> operating class to use with DPP
        -z <info> to pass along with public key in PKEX
        -k <filename> my bootstrapping key
        -b  bootstrapping (PKEX) only, don't run DPP
        -x <index> DPP only with key <index> in -B <filename>, don't do PKEX
        -m <MAC address> to initiate to, otherwise uses broadcast
        -s  change opclass/channel to what was set with -f and -g
	-u <url> to find a MUD file (enrollee only)
	-t  send DPP chirps (responder only)
	-w <ipaddr> the IP address where a CA is listening
        -d <debug> set debugging mask

The debugging mask is a bitmask to set the following:
    - 0x01 -- error
    - 0x02 -- protocol messages
    - 0x04 -- state machine transitions
    - 0x08 -- crypto operations
    - 0x10 -- crypto operations in verbose mode
    - 0x20 -- chatty protocol tracing
    - 0x40 -- PKI operations
so "-d 18" would turn on protocol messages and verbose crypto operations

* PKEX Only

  Start up a PKEX responder:

% ./sss -I lo0 -r -p fubar -n blah -k respp256.pem -B respbkeys.txt -b -d 63

This says to use interface lo0 (loopback), run as the responder, use "fubar"
as the password and "blah" as the identifier, use respp256.pem as the
bootstrapping key, use respbkeys.txt as the flat file of peer's trusted
bootstrapping keys, do PKEX only, and set the debugging mask to be verbose.
The responder will wait until an intiator beings PKEX to it.

  Start up a PKEX initiator:

% ./sss -I lo0 -i -p fubar -n blah -k initp256.pem -B initbkeys.txt -b -d 63

This says to use interface lo0 (loopback), run as the initiator, use "fubar"
as the password and "blah" as the identifier, use initp256.pem as the
bootstrapping key, use initbkeys.txt as the flat file of peer's trusted
bootstrapping keys, do PKEX only, and set the debugging mask to be verbose.

* PKEX then DPP

  Start up a responder/enrollee:

% ./sss -I ath0 -r -e ap -p thisissecret -k respbp384.pem -B respbkeys.txt -d 63

This says to use the interface ath0 (802.11 radio), run as the responder, run as
the enrollee with a role of "ap", use "thisissecret" as the PKEX password, use
respbp384.pem as the bootstrapping key, use respbkeys.txt as the flat file of
peer's trusted bootstrapping keys, and set verbose debugging.

% ./sss -I lo0 -i -c signp521.pem -p thisissecret -k initbp384.pem -B initbkeys.txt -d 63

This says to use the interface ath0 (802.11 radio)), run as the initiator, run as a
configurator and sign with the key signp521.pem, use "thisissecret" as the PKEX
password, use initbp384.pem as the bootstrapping key, use initbkeys.txt as the flat
file of peer's trusted bootstrapping keys, and set verbose debugging.

  Since this was a run of DPP as well, the enrollee will get a connector signed by
the configurator. Since the enrollee had the role "ap" it will get a connector for
the role of AP and be given an SSID to advertise. The ath0 interface on this device
is now provisioned for DPP on that SSID and awaits connection from a STA. The
connector received from this run is for the SSID "goaway" and looks like this:

connector is signed with ES512, by key with key id:
 SRHSlHn-YkFGdNq1XIBesoIy4YaSZGs7IRhvo8_py8s
configurator's signing key is valid!!!
connector:
eyJ0eXAiOiJkcHBDb24iLCJraWQiOiJTUkhTbEhuLVlrRkdkTnExWElCZXNvSXk0WWFTWkdzN0lSaHZvOF
9weThzIiwiYWxnIjoiRVM1MTIifQ.eyJncm91cHMiOlt7Imdyb3VwSWQiOiJpbnRlcm9wIiwibmV0Um9sZ
SI6ImFwIn1dLCJuZXRBY2Nlc3NLZXkiOnsia3R5IjoiRUMiLCJjcnYiOiJCUC0zODQiLCJ4IjoiSkpxRGR
mN2Z6X1dJcWN0VnI4Rnp0b0FLaGN4b3BFVlRIdk9ObTFzV3c0ZUlsaEtNUHdiYkJzNDJYbEFNRTE4cCIsI
nkiOiJDR0lqRWRULXVQd0JCd0M0SklTeDhxaXROWVlicW50ODI5ZFZhbnF1bVJaSVZoVkU3NDkwYXphSEl
oZVVERWZsIiwia2lkIjoid3NZNW1LalVXVGs0Y3A0QUdWaTVYRnBhR3pub1V1clBNblBIMTZQN19lQSJ9L
CJleHBpcnkiOiIyMDIwLTAxLTAxVDAxOjAxOjAxIn0.ASt4K3BRyo3O9l1w9G6YWt2iJBmyrRUz5xM0-18
QTTkFEs8TMqxLCZE7E093PyEdK9pGUK4wMg8BoissDyZNSpLQAciprohd8d2VB3R4acwuy9qoZr4EUVfM0
BCO_X34aT1oSygyU39BaiGWYaoSPcKztOcmnpk_qw7Q05xCaazfZ2Dj
with SSID goaway

This is printed because debugging is set to verbose.

  A STA can be provisioned on another device by running something similar, for example:

% ./sss -I ath0 -r -e sta -p somethingunique -k stabp384.pem -B stabkeys.txt

which, when it completes, will obtain a connector useful for a STA and told to 
connect to "goaway". When it does it will exchange connectors and derive a PMK.

A flat file called "configakm" in the same directory as sss contains information
about the network policies for a configurator to provision on an enrollee. The
format is:

  <akm> <password> <ssid>

So for instance, one could provision a DPP on "byteme" and an SAE network on
"goaway" using "fubar" as the password with the following:

  dpp none byteme
  sae fubar goaway

This will result in the configurator generating 2 Configuration Objects during
the DPP Configuration exchange.

The following AKMs are supported: dpp, dot1x, sae, psk.

This distribution does not currently support hybrid AKMs like sae+dpp but as
part of DPPv2 will send a connector with each Configuration Object regardless
of AKM. 

* Enterprise credentials

There is an openssl app in ecca named ecca.c. It's about as simple as it comes.
To generate a CA, locally run genecca and answer the questions to name your CA.
Then start it up:

% ./ecca [something]

where [something] is any optional parameter. Passing nothing will result in the
CA not including its certificate in the PKCS7 it returns back with the client
cert, but it will send its cert in a separate request. If there is something
passed then the CA will include its cert in a client PKCS7 and send back nothing
if asked for its cert by itself.

The interface to the CA has been abstracted with talk2ca.c. This exposes some
APIs to dpp.c to get the CA cert (or not), to send a PKCS10 to the CA, and to
obtain a PKCS7 from the CA. To support asychronicity of such a req/resp exchange
DPP sends a callback along with the PKCS10 which will get called when the CA
responds. Should be self-explanitory if you look at talk2ca.c and dpp.c where
it exercises the APIs.

It should be straightforward to substitute any communication to a CA and retain
the interface between dpp.c and talk2ca.c, how the actual communication is done
doesn't matter to dpp. In addition, if the callback operation doesn't work for
your particular use case, the APIs have been isolated in dpp.c into p10toca()
and p7fromca() so it should be pretty straightforward to plug in anything there.

A Configurator supporting certificates will respond to a Config Request that
does not have a PKCS10 with a response containing a list of attributes in the
form of a CSR Request. The particular attributes it sends are determined by
the file csrattrs.nconf which is, as the name suggests, an NCONF file that is
parsed to construct an ASN.1 SEQUENCE. It should be pretty obvious how to
add new stuff. NIDs can be found in <openssl>/crypto/objects/objects.txt if
you want to customize what goes into your certs. Of course, adding anything
exotic will require the Enrollee to understand what it is you're asking so
be prepared to write some more code if you want to get really weird.

* Wired DPP

  A TCP/IP version of DPP is included with relay.c, controller.c, and device.c
The controller is an aggregator of DPP conversations done over the wire through
relays which encaps/decaps 802.11 action frames into/out of TCP/IP. The device
speaks DPP solely through TCP/IP, no action frames used. 

  To run it you need either a controller and a device or a controller, a relay,
and a regualar instance of sss. For example,

For instance, sss is running as a responder not doing mutual authentication
(i.e. like a typical IoT device) and will "chirp" it's unprovisioned status:

 % sudo ./sss -I ath0 -r -e sta -k respp256.pem -a -t -d 63

Then on a different computer a relay is running that would connect to a
controller at 10.10.10.99 if anyone initiated to it and it will snoop for DPP
frames with a responder's bootstrapping key indicated by the contents of
controller_b64:

 % sudo ./relay -I wlp58s0 -C 10.10.10.99 -b controller_b64.txt -d 63

And on a 3rd computer the controller can be run to attach to a relay at
10.10.10.98 and assuming the IoT device's (sss) public key has been bootstrapped
into initbkeys.txt:

 % sudo ./controller -i -c signp256.pem -I 10.10.10.98 -k controller.pem \
-B initbkeys.txt -d 63

The controller will identify the unprovisioned peer from the "chirp", find a matching
bootstrapping key in the index file, initiate through the relay to the IoT device and
provision a connector on it.

WORKING WITH WPA_SUPPLICANT

Upon successful provisioning, a configuration file will be created that is suitable
for using with wpa_supplicant. The name of the file will be <ssid>_<akm>.conf where
<ssid> is the SSID and <akm> is the AKM sent back in the DPP Configuration Object.
This file can be used directly with wpa_supplicant. For example:

% sudo ./sss -I ath0 -r -e sta -p fubar -n blah -k respp256.pem -B respbkeys.txt -d 63

will create a .conf file, let's call it goaway_dpp.conf assuming the SSID provisioned
is "goaway" and assuming "goaway" is a DPP network.

% sudo wpa_supplicant -Dnl80211 -iath0 -dd -c./goaway_dpp.conf

Will bring up a supplicant to connect to "goaway" using the DPP Network Discovery
protocol followed by the 802.11 authentication, association, and the 4way handshake,
assuming that there is a DPP-compatible AP advertising "goaway" that has been
provisioned by the same Configurator. If "goaway" is a PSK or SAE network a
wpa_supplicant configuration file will be created to connect to one of those networks.


CONTENTS OF DISTRIBUTION

  There are various keys to use by the initiator (initXXX.pem) and the responder
(respXXX.pem) and to use for signatures by the configurator (signXXX.pem). The
curves are identified as:

  p256 -- NIST 256-bit elliptic curve
  p384 -- NIST 384-bit elliptic curve
  p521 -- NIST 521-bit elliptic curve
  bp256 -- Brainpool 256-bit elliptic curve
  bp384 -- Brainpool 384-bit elliptic curve
  bp512 -- Brainpool 512-bit elliptic curve

More, or different ones, can be made with openssl.

  There is a QR code for the controller-- controller.png contains the
public key found in controller.pem. 

FAQ

  1) segfault due to long wifi interface (longer than IFNAMSIZ) name in linux

    # just change interface name

    sudo ifconfig wlxc4e9841c6a82 down
    sudo ip link set wlxc4e9841c6a82 name wlan0
    sudo ifconfig wlan0 up
    ./sss -I wlan0 -i -p fubar -n blah -k initp256.pem -B initbkeys.txt -b -d 63
